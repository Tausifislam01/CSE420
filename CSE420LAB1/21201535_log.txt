Line no 1: Token <INT> Lexeme int found

At line no: 1 type_specifier : INT

Line no 1: Token <ID> Lexeme x found

Line no 1: Token <COMMA> Lexeme , found

At line no: 1 declaration_list : ID

x

Line no 1: Token <ID> Lexeme y found

Line no 1: Token <COMMA> Lexeme , found

At line no: 1 declaration_list : declaration_list COMMA ID

x

Line no 1: Token <ID> Lexeme z found

Line no 1: Token <SEMICOLON> Lexeme ; found

At line no: 1 declaration_list : declaration_list COMMA ID

x,y

At line no: 1 var_declaration : type_specifier declaration_list SEMICOLON

int x,y,z

At line no: 1 unit : var_declaration

int x,y,z;

At line no: 1 program : unit

int x,y,z;

Line no 1: Token <FLOAT> Lexeme float found

At line no: 1 type_specifier : FLOAT

Line no 1: Token <ID> Lexeme a found

Line no 1: Token <SEMICOLON> Lexeme ; found

At line no: 1 declaration_list : ID

a

At line no: 1 var_declaration : type_specifier declaration_list SEMICOLON

float a

At line no: 1 unit : var_declaration

float a;

At line no: 1 program : program unit 

int x,y,z;

Line no 3: Token <INT> Lexeme int found

At line no: 3 type_specifier : INT

Line no 3: Token <ID> Lexeme var found

Line no 3: Token <LPAREN> Lexeme ( found

Line no 3: Token <INT> Lexeme int found

At line no: 3 type_specifier : INT

Line no 3: Token <ID> Lexeme a found

At line no: 3 parameter_list : type_specifier ID

int a

Line no 3: Token <COMMA> Lexeme , found

Line no 3: Token <INT> Lexeme int found

At line no: 3 type_specifier : INT

Line no 3: Token <ID> Lexeme b found

At line no: 3 parameter_list : parameter_list COMMA type_specifier ID

int a int b

Line no 3: Token <RPAREN> Lexeme ) found

Line no 3: Token <LCURL> Lexeme { found

Line no 4: Token <RETURN> Lexeme return found

Line no 4: Token <ID> Lexeme a found

Line no 4: Token <ADDOP> Lexeme + found

At line no: 4 variable : ID

a

At line no: 4 factor : variable 

a

At line no: 4 unary_expression : factor

a

At line no: 4term : unary_expression

a

At line no: 4tsimple_expression : term

a

Line no 4: Token <ID> Lexeme b found

Line no 4: Token <SEMICOLON> Lexeme ; found

At line no: 4 variable : ID

b

At line no: 4 factor : variable 

b

At line no: 4 unary_expression : factor

b

At line no: 4term : unary_expression

b

At line no: 4 tsimple_expression : simple_expression ADDOP term

a b

At line no: 4rel_expression : simple_expression

a+b

At line no: 4logic_expression : rel_expression

a+b

At line no: 4expression : logic_expression

a+b

At line no: 4statement : RETURN expression SEMICOLON  

a+b

At line no: 4 statements : statement

return a+b;

Line no 5: Token <RCURL> Lexeme } found

At line no: 5 compound_statement : LCURL statements RCURL

return a+b;

At line no: 5 func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int var int a,int b {
return a+b;
}

At line no: 5 unit : func_definition

int var(int a,int b)
{
return a+b;
}

At line no: 5 program : program unit 

int x,y,z;
float a;

Line no 7: Token <VOID> Lexeme void found

At line no: 7 type_specifier : VOID

Line no 7: Token <ID> Lexeme foo found

Line no 7: Token <LPAREN> Lexeme ( found

Line no 7: Token <RPAREN> Lexeme ) found

Line no 7: Token <LCURL> Lexeme { found

Line no 8: Token <ID> Lexeme x found

Line no 8: Token <ASSIGNOP> Lexeme = found

At line no: 8 variable : ID

x

Line no 8: Token <CONST_INT> Lexeme 2 found

At line no: 8factor : CONST_INT 



At line no: 8 unary_expression : factor

2

At line no: 8term : unary_expression

2

Line no 8: Token <SEMICOLON> Lexeme ; found

At line no: 8tsimple_expression : term

2

At line no: 8rel_expression : simple_expression

2

At line no: 8logic_expression : rel_expression

2

At line no: 8 expression : variable ASSIGNOP logic_expression

x 2

At line no: 8expression_statement : expression SEMICOLON 

x=2

At line no: 8statement : expression_statement 

x=2;

At line no: 8 statements : statement

x=2;

Line no 9: Token <ID> Lexeme y found

Line no 9: Token <ASSIGNOP> Lexeme = found

At line no: 9 variable : ID

y

Line no 9: Token <ID> Lexeme x found

Line no 9: Token <ADDOP> Lexeme - found

At line no: 9 variable : ID

x

At line no: 9 factor : variable 

x

At line no: 9 unary_expression : factor

x

At line no: 9term : unary_expression

x

At line no: 9tsimple_expression : term

x

Line no 9: Token <CONST_INT> Lexeme 5 found

At line no: 9factor : CONST_INT 



At line no: 9 unary_expression : factor

5

At line no: 9term : unary_expression

5

Line no 9: Token <SEMICOLON> Lexeme ; found

At line no: 9 tsimple_expression : simple_expression ADDOP term

x 5

At line no: 9rel_expression : simple_expression

x-5

At line no: 9logic_expression : rel_expression

x-5

At line no: 9 expression : variable ASSIGNOP logic_expression

y x-5

At line no: 9expression_statement : expression SEMICOLON 

y=x-5

At line no: 9statement : expression_statement 

y=x-5;

At line no: 9 statements : statements statement 

x=2; y=x-5;

Line no 10: Token <RCURL> Lexeme } found

At line no: 10 compound_statement : LCURL statements RCURL

x=2;
y=x-5;

At line no: 10 func_definition : type_specifier ID LPAREN RPAREN compound_statement 

void foo {
x=2;
y=x-5;
}

At line no: 10 unit : func_definition

void foo()
{
x=2;
y=x-5;
}

At line no: 10 program : program unit 

int x,y,z;
float a;
int var(int a,int b)
{
return a+b;
}

Line no 12: Token <INT> Lexeme int found

At line no: 12 type_specifier : INT

Line no 12: Token <ID> Lexeme main found

Line no 12: Token <LPAREN> Lexeme ( found

Line no 12: Token <RPAREN> Lexeme ) found

Line no 12: Token <LCURL> Lexeme { found

Line no 13: Token <INT> Lexeme int found

At line no: 13 type_specifier : INT

Line no 13: Token <ID> Lexeme a found

Line no 13: Token <LTHIRD> Lexeme [ found

Line no 13: Token <CONST_INT> Lexeme 2 found

Line no 13: Token <RTHIRD> Lexeme ] found

At line no: 13declaration_list : ID LTHIRD CONST_INT RTHIRD 

a

Line no 13: Token <COMMA> Lexeme , found

Line no 13: Token <ID> Lexeme c found

Line no 13: Token <COMMA> Lexeme , found

At line no: 13 declaration_list : declaration_list COMMA ID

a[2]

Line no 13: Token <ID> Lexeme i found

Line no 13: Token <COMMA> Lexeme , found

At line no: 13 declaration_list : declaration_list COMMA ID

a[2],c

Line no 13: Token <ID> Lexeme j found

Line no 13: Token <SEMICOLON> Lexeme ; found

At line no: 13 declaration_list : declaration_list COMMA ID

a[2],c,i

At line no: 13 var_declaration : type_specifier declaration_list SEMICOLON

int a[2],c,i,j

At line no: 13statement : var_declaration

int a[2],c,i,j;

At line no: 13 statements : statement

int a[2],c,i,j;

Line no 13: Token <FLOAT> Lexeme float found

At line no: 13 type_specifier : FLOAT

Line no 13: Token <ID> Lexeme d found

Line no 13: Token <SEMICOLON> Lexeme ; found

At line no: 13 declaration_list : ID

d

At line no: 13 var_declaration : type_specifier declaration_list SEMICOLON

float d

At line no: 13statement : var_declaration

float d;

At line no: 13 statements : statements statement 

int a[2],c,i,j; float d;

Line no 14: Token <ID> Lexeme a found

Line no 14: Token <LTHIRD> Lexeme [ found

Line no 14: Token <CONST_INT> Lexeme 0 found

At line no: 14factor : CONST_INT 



At line no: 14 unary_expression : factor

0

At line no: 14term : unary_expression

0

Line no 14: Token <RTHIRD> Lexeme ] found

At line no: 14tsimple_expression : term

0

At line no: 14rel_expression : simple_expression

0

At line no: 14logic_expression : rel_expression

0

At line no: 14expression : logic_expression

0

At line no: 14 variable : ID LTHIRD expression RTHIRD

a 0

Line no 14: Token <SEMICOLON> Lexeme ; found

At line no: 14 factor : variable 

a[0]

At line no: 14 unary_expression : factor

a[0]

At line no: 14term : unary_expression

a[0]

At line no: 14tsimple_expression : term

a[0]

At line no: 14rel_expression : simple_expression

a[0]

At line no: 14logic_expression : rel_expression

a[0]

At line no: 14expression : logic_expression

a[0]

At line no: 14expression_statement : expression SEMICOLON 

a[0]

At line no: 14statement : expression_statement 

a[0];

At line no: 14 statements : statements statement 

int a[2],c,i,j;
float d; a[0];

Line no 15: Token <ID> Lexeme a found

Line no 15: Token <LTHIRD> Lexeme [ found

Line no 15: Token <CONST_INT> Lexeme 1 found

At line no: 15factor : CONST_INT 



At line no: 15 unary_expression : factor

1

At line no: 15term : unary_expression

1

Line no 15: Token <RTHIRD> Lexeme ] found

At line no: 15tsimple_expression : term

1

At line no: 15rel_expression : simple_expression

1

At line no: 15logic_expression : rel_expression

1

At line no: 15expression : logic_expression

1

At line no: 15 variable : ID LTHIRD expression RTHIRD

a 1

Line no 15: Token <ASSIGNOP> Lexeme = found

Line no 15: Token <CONST_INT> Lexeme 5 found

At line no: 15factor : CONST_INT 



At line no: 15 unary_expression : factor

5

At line no: 15term : unary_expression

5

Line no 15: Token <SEMICOLON> Lexeme ; found

At line no: 15tsimple_expression : term

5

At line no: 15rel_expression : simple_expression

5

At line no: 15logic_expression : rel_expression

5

At line no: 15 expression : variable ASSIGNOP logic_expression

a[1] 5

At line no: 15expression_statement : expression SEMICOLON 

a[1]=5

At line no: 15statement : expression_statement 

a[1]=5;

At line no: 15 statements : statements statement 

int a[2],c,i,j;
float d;
a[0]; a[1]=5;

Line no 16: Token <ID> Lexeme i found

Line no 16: Token <ASSIGNOP> Lexeme = found

At line no: 16 variable : ID

i

Line no 16: Token <ID> Lexeme a found

Line no 16: Token <LTHIRD> Lexeme [ found

Line no 16: Token <CONST_INT> Lexeme 0 found

At line no: 16factor : CONST_INT 



At line no: 16 unary_expression : factor

0

At line no: 16term : unary_expression

0

Line no 16: Token <RTHIRD> Lexeme ] found

At line no: 16tsimple_expression : term

0

At line no: 16rel_expression : simple_expression

0

At line no: 16logic_expression : rel_expression

0

At line no: 16expression : logic_expression

0

At line no: 16 variable : ID LTHIRD expression RTHIRD

a 0

Line no 16: Token <ADDOP> Lexeme + found

At line no: 16 factor : variable 

a[0]

At line no: 16 unary_expression : factor

a[0]

At line no: 16term : unary_expression

a[0]

At line no: 16tsimple_expression : term

a[0]

Line no 16: Token <ID> Lexeme a found

Line no 16: Token <LTHIRD> Lexeme [ found

Line no 16: Token <CONST_INT> Lexeme 1 found

At line no: 16factor : CONST_INT 



At line no: 16 unary_expression : factor

1

At line no: 16term : unary_expression

1

Line no 16: Token <RTHIRD> Lexeme ] found

At line no: 16tsimple_expression : term

1

At line no: 16rel_expression : simple_expression

1

At line no: 16logic_expression : rel_expression

1

At line no: 16expression : logic_expression

1

At line no: 16 variable : ID LTHIRD expression RTHIRD

a 1

Line no 16: Token <SEMICOLON> Lexeme ; found

At line no: 16 factor : variable 

a[1]

At line no: 16 unary_expression : factor

a[1]

At line no: 16term : unary_expression

a[1]

At line no: 16 tsimple_expression : simple_expression ADDOP term

a[0] a[1]

At line no: 16rel_expression : simple_expression

a[0]+a[1]

At line no: 16logic_expression : rel_expression

a[0]+a[1]

At line no: 16 expression : variable ASSIGNOP logic_expression

i a[0]+a[1]

At line no: 16expression_statement : expression SEMICOLON 

i=a[0]+a[1]

At line no: 16statement : expression_statement 

i=a[0]+a[1];

At line no: 16 statements : statements statement 

int a[2],c,i,j;
float d;
a[0];
a[1]=5; i=a[0]+a[1];

Line no 17: Token <ID> Lexeme j found

Line no 17: Token <ASSIGNOP> Lexeme = found

At line no: 17 variable : ID

j

Line no 17: Token <CONST_INT> Lexeme 2 found

At line no: 17factor : CONST_INT 



At line no: 17 unary_expression : factor

2

At line no: 17term : unary_expression

2

Line no 17: Token <MULOP> Lexeme * found

Line no 17: Token <CONST_INT> Lexeme 3 found

At line no: 17factor : CONST_INT 



At line no: 17 unary_expression : factor

3

At line no: 17 term :  term MULOP unary_expression

2 3

Line no 17: Token <ADDOP> Lexeme + found

At line no: 17tsimple_expression : term

2*3

Line no 17: Token <LPAREN> Lexeme ( found

Line no 17: Token <CONST_INT> Lexeme 5 found

At line no: 17factor : CONST_INT 



At line no: 17 unary_expression : factor

5

At line no: 17term : unary_expression

5

Line no 17: Token <MULOP> Lexeme % found

Line no 17: Token <CONST_INT> Lexeme 3 found

At line no: 17factor : CONST_INT 



At line no: 17 unary_expression : factor

3

At line no: 17 term :  term MULOP unary_expression

5 3

Line no 17: Token <RELOP> Lexeme < found

At line no: 17tsimple_expression : term

5%3

Line no 17: Token <CONST_INT> Lexeme 4 found

At line no: 17factor : CONST_INT 



At line no: 17 unary_expression : factor

4

At line no: 17term : unary_expression

4

Line no 17: Token <LOGICOP> Lexeme && found

At line no: 17tsimple_expression : term

4

At line no: 17 rel_expression : simple_expression RELOP simple_expression

5%3 4

Line no 17: Token <CONST_INT> Lexeme 8 found

At line no: 17factor : CONST_INT 



At line no: 17 unary_expression : factor

8

At line no: 17term : unary_expression

8

Line no 17: Token <RPAREN> Lexeme ) found

At line no: 17tsimple_expression : term

8

At line no: 17rel_expression : simple_expression

8

At line no: 17 logic_expression : rel_expression LOGICOP rel_expression

5%3<4 8

At line no: 17expression : logic_expression

5%3<4&&8

At line no: 17 factor : LPAREN expression RPAREN 

+ 8

At line no: 17 unary_expression : factor

(5%3<4&&8)

At line no: 17term : unary_expression

(5%3<4&&8)

Line no 17: Token <LOGICOP> Lexeme || found

At line no: 17 tsimple_expression : simple_expression ADDOP term

2*3 (5%3<4&&8)

At line no: 17rel_expression : simple_expression

2*3+(5%3<4&&8)

Line no 17: Token <CONST_INT> Lexeme 2 found

At line no: 17factor : CONST_INT 



At line no: 17 unary_expression : factor

2

At line no: 17term : unary_expression

2

Line no 17: Token <SEMICOLON> Lexeme ; found

At line no: 17tsimple_expression : term

2

At line no: 17rel_expression : simple_expression

2

At line no: 17 logic_expression : rel_expression LOGICOP rel_expression

2*3+(5%3<4&&8) 2

At line no: 17 expression : variable ASSIGNOP logic_expression

j 2*3+(5%3<4&&8)||2

At line no: 17expression_statement : expression SEMICOLON 

j=2*3+(5%3<4&&8)||2

At line no: 17statement : expression_statement 

j=2*3+(5%3<4&&8)||2;

At line no: 17 statements : statements statement 

int a[2],c,i,j;
float d;
a[0];
a[1]=5;
i=a[0]+a[1]; j=2*3+(5%3<4&&8)||2;

Line no 18: Token <ID> Lexeme d found

Line no 18: Token <ASSIGNOP> Lexeme = found

At line no: 18 variable : ID

d

Line no 18: Token <ID> Lexeme var found

Line no 18: Token <LPAREN> Lexeme ( found

Line no 18: Token <CONST_INT> Lexeme 1 found

At line no: 18factor : CONST_INT 



At line no: 18 unary_expression : factor

1

At line no: 18term : unary_expression

1

Line no 18: Token <COMMA> Lexeme , found

At line no: 18tsimple_expression : term

1

At line no: 18rel_expression : simple_expression

1

At line no: 18logic_expression : rel_expression

1

At line no: 18 arguments : logic_expression 

1

Line no 18: Token <CONST_INT> Lexeme 2 found

At line no: 18factor : CONST_INT 



At line no: 18 unary_expression : factor

2

At line no: 18term : unary_expression

2

Line no 18: Token <MULOP> Lexeme * found

Line no 18: Token <CONST_INT> Lexeme 3 found

At line no: 18factor : CONST_INT 



At line no: 18 unary_expression : factor

3

At line no: 18 term :  term MULOP unary_expression

2 3

Line no 18: Token <RPAREN> Lexeme ) found

At line no: 18tsimple_expression : term

2*3

At line no: 18rel_expression : simple_expression

2*3

At line no: 18logic_expression : rel_expression

2*3

At line no: 18 arguments : arguments COMMA logic_expression 

1 2*3

At line no: 18 argument_list : arguments 

1,2*3

At line no: 18 factor : ID LPAREN argument_list RPAREN

var 1,2*3

At line no: 18 unary_expression : factor

var(1,2*3)

At line no: 18term : unary_expression

var(1,2*3)

Line no 18: Token <ADDOP> Lexeme + found

At line no: 18tsimple_expression : term

var(1,2*3)

Line no 18: Token <CONST_FLOAT> Lexeme 3.5 found

At line no: 18factor : CONST_FLOAT 



At line no: 18 unary_expression : factor

3.5

At line no: 18term : unary_expression

3.5

Line no 18: Token <MULOP> Lexeme * found

Line no 18: Token <CONST_INT> Lexeme 2 found

At line no: 18factor : CONST_INT 



At line no: 18 unary_expression : factor

2

At line no: 18 term :  term MULOP unary_expression

3.5 2

Line no 18: Token <SEMICOLON> Lexeme ; found

At line no: 18 tsimple_expression : simple_expression ADDOP term

var(1,2*3) 3.5*2

At line no: 18rel_expression : simple_expression

var(1,2*3)+3.5*2

At line no: 18logic_expression : rel_expression

var(1,2*3)+3.5*2

At line no: 18 expression : variable ASSIGNOP logic_expression

d var(1,2*3)+3.5*2

At line no: 18expression_statement : expression SEMICOLON 

d=var(1,2*3)+3.5*2

At line no: 18statement : expression_statement 

d=var(1,2*3)+3.5*2;

At line no: 18 statements : statements statement 

int a[2],c,i,j;
float d;
a[0];
a[1]=5;
i=a[0]+a[1];
j=2*3+(5%3<4&&8)||2; d=var(1,2*3)+3.5*2;

Line no 19: Token <RETURN> Lexeme return found

Line no 19: Token <CONST_INT> Lexeme 0 found

At line no: 19factor : CONST_INT 



At line no: 19 unary_expression : factor

0

At line no: 19term : unary_expression

0

Line no 19: Token <SEMICOLON> Lexeme ; found

At line no: 19tsimple_expression : term

0

At line no: 19rel_expression : simple_expression

0

At line no: 19logic_expression : rel_expression

0

At line no: 19expression : logic_expression

0

At line no: 19statement : RETURN expression SEMICOLON  

0

At line no: 19 statements : statements statement 

int a[2],c,i,j;
float d;
a[0];
a[1]=5;
i=a[0]+a[1];
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3.5*2; return 0;

Line no 20: Token <RCURL> Lexeme } found

At line no: 20 compound_statement : LCURL statements RCURL

int a[2],c,i,j;
float d;
a[0];
a[1]=5;
i=a[0]+a[1];
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3.5*2;
return 0;

At line no: 20 func_definition : type_specifier ID LPAREN RPAREN compound_statement 

int main {
int a[2],c,i,j;
float d;
a[0];
a[1]=5;
i=a[0]+a[1];
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3.5*2;
return 0;
}

At line no: 20 unit : func_definition

int main()
{
int a[2],c,i,j;
float d;
a[0];
a[1]=5;
i=a[0]+a[1];
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3.5*2;
return 0;
}

At line no: 20 program : program unit 

int x,y,z;
float a;
int var(int a,int b)
{
return a+b;
}
void foo()
{
x=2;
y=x-5;
}

At line no: 21 start : program

int x,y,z;
float a;
int var(int a,int b)
{
return a+b;
}
void foo()
{
x=2;
y=x-5;
}
int main()
{
int a[2],c,i,j;
float d;
a[0];
a[1]=5;
i=a[0]+a[1];
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3.5*2;
return 0;
}

Total Lines: 21